#!/bin/bash

program=`basename $0`

GETOPT=getopt
platform=$(uname)
if [[ "$platform" == 'Darwin' ]]; then
  if command -v gnu-getopt >/dev/null 2>&1; then
    GETOPT=gnu-getopt
  else
    echo 'Error: getopt on OSX does not parse arguments properly' >&2
    echo 'brew install gnu-getopt' >&2
    echo 'then symlink gnu-getopt to /usr/local/Cellar/gnu-getopt/1.1.5/bin/getopt' >&2
    exit 1
  fi
fi
ARGS=$($GETOPT -o acih? -l "all,images,container,help" -n "$program" -- "$@");

function usage() {
  cat <<EOT
Usage: $program
  --all (-a)
  --containers (-c)
  --images (-i)
  --help (-h|-?)
EOT
}

# Don't fail on error until after parsing
set -o errexit

# Replace args with parsed arguments
eval set -- "$ARGS";

while true; do
  case "$1" in
    -a|--all)
      shift;
      opt_containers=true
      opt_images=true
      ;;
    -c|--containers)
      shift;
      opt_containers=true
      ;;
    -i|--images)
      shift;
      opt_images=true
      ;;
    -h|-\?|--help)
      shift;
      usage
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Invalid argument $1"
      shift
      usage
      exit 1
      ;;
  esac
done

if [ -z "$opt_containers" ]; then
  echo 'Removing stopped containers'
  if ! docker rm $(docker ps -a -q); then
    echo 'Failed to remove running containers'
    docker ps -a
    exit 2
  fi
fi
if [ -z "$opt_images" ]; then
  echo 'Removing unused images'
  ids=$(docker images -q --filter "dangling=true")
  docker rmi $ids
fi
